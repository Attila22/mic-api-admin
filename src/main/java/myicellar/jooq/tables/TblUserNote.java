/**
 * This class is generated by jOOQ
 */
package myicellar.jooq.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import myicellar.jooq.Keys;
import myicellar.jooq.MicCore;
import myicellar.jooq.records.UserNoteJQR;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblUserNote extends TableImpl<UserNoteJQR> {

	private static final long serialVersionUID = 508711117;

	/**
	 * The reference instance of <code>mic_core.user_note</code>
	 */
	public static final TblUserNote USER_NOTE = new TblUserNote();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserNoteJQR> getRecordType() {
		return UserNoteJQR.class;
	}

	/**
	 * The column <code>mic_core.user_note.note_id</code>.
	 */
	public final TableField<UserNoteJQR, Long> NOTE_ID = createField("note_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mic_core.user_note.user_id</code>.
	 */
	public final TableField<UserNoteJQR, UUID> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>mic_core.user_note.occas_id</code>.
	 */
	public final TableField<UserNoteJQR, Long> OCCAS_ID = createField("occas_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>mic_core.user_note.note_date</code>.
	 */
	public final TableField<UserNoteJQR, Date> NOTE_DATE = createField("note_date", org.jooq.impl.SQLDataType.DATE.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mic_core.user_note.wine_id</code>.
	 */
	public final TableField<UserNoteJQR, Long> WINE_ID = createField("wine_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>mic_core.user_note.vintage_tag</code>.
	 */
	public final TableField<UserNoteJQR, Short> VINTAGE_TAG = createField("vintage_tag", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mic_core.user_note.rate</code>.
	 */
	public final TableField<UserNoteJQR, Short> RATE = createField("rate", org.jooq.impl.SQLDataType.SMALLINT, this, "");

	/**
	 * The column <code>mic_core.user_note.note</code>.
	 */
	public final TableField<UserNoteJQR, String> NOTE = createField("note", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>mic_core.user_note.is_archived</code>.
	 */
	public final TableField<UserNoteJQR, Boolean> IS_ARCHIVED = createField("is_archived", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mic_core.user_note.note_img</code>.
	 */
	public final TableField<UserNoteJQR, UUID> NOTE_IMG = createField("note_img", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>mic_core.user_note.last_upd_mictime</code>.
	 */
	public final TableField<UserNoteJQR, Integer> LAST_UPD_MICTIME = createField("last_upd_mictime", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>mic_core.user_note</code> table reference
	 */
	public TblUserNote() {
		this("user_note", null);
	}

	/**
	 * Create an aliased <code>mic_core.user_note</code> table reference
	 */
	public TblUserNote(String alias) {
		this(alias, USER_NOTE);
	}

	private TblUserNote(String alias, Table<UserNoteJQR> aliased) {
		this(alias, aliased, null);
	}

	private TblUserNote(String alias, Table<UserNoteJQR> aliased, Field<?>[] parameters) {
		super(alias, MicCore.MIC_CORE, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<UserNoteJQR, Long> getIdentity() {
		return Keys.IDENTITY_USER_NOTE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UserNoteJQR> getPrimaryKey() {
		return Keys.USER_NOTE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UserNoteJQR>> getKeys() {
		return Arrays.<UniqueKey<UserNoteJQR>>asList(Keys.USER_NOTE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TblUserNote as(String alias) {
		return new TblUserNote(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TblUserNote rename(String name) {
		return new TblUserNote(name, null);
	}
}
